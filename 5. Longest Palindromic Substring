class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        max_len = 0
        s_len = len(s)
        
        if s_len<2:
            return s
        p = [[0 for i in range(s_len)] for j in range(s_len)]
        max_len = 1
        for i in range(s_len):
            p[i][i] = 1
            if i != s_len-1 and s[i] == s[i+1]:
                p[i][i+1] = 1
                max_len = 2
        
        for len_str in range(3, s_len+1):
            for i in range(s_len):
                j = i+len_str-1
                if j < s_len and p[i+1][j-1]==1 and s[i] == s[j]:
                    p[i][j] = 1
                    if len_str > max_len:
                        max_len = len_str
                    #print(i, j)
        #print(p)
        #print(max_len)
        for i in range(s_len):
            j = i+max_len-1
            if j < s_len and p[i][j] == 1:
                sub_str = s[i:j+1]        
        return sub_str
        
       
#also we can try to split string by 2n-1 positions and predict whether substring around these position is a Palindrome.
