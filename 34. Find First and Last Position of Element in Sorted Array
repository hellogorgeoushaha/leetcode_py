class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        length = len(nums)
        if not nums:
            return [-1, -1]
        low = 0
        high = length - 1
        start = end = -1
        
        while low <= high:
            mid = (low + high)//2
            if nums[mid] == target: 
                if mid == 0 or nums[mid-1] < nums[mid]:
                    start = mid
                    break
                high = mid - 1
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1
        low = 0
        high = length - 1
        while low <= high:
            mid = (low + high)//2
            if nums[mid] == target: 
                if mid == length - 1 or nums[mid] < nums[mid+1]:
                    end = mid
                    break
                low = mid + 1
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1
        res = [start, end]
        return res
        
# two binary search for start and end, respectly
