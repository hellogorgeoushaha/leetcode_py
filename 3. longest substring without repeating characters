#two points which point to the begin and the end of the substring
#a hashtable to denote the latest appearance of a given letter


class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)<2:
            return len(s)
        i = 0
        j = 1
        hasht = {}
        index = -1
        maxlen = 1
        hasht[s[0]]=0
        while j < len(s):
            index = hasht.get(s[j], -1)
            if index != -1 and index >= i:
                i = index+1
                maxlen = maxlen if maxlen > j-i else j-i 
            hasht[s[j]] = j
            j += 1
            #print(maxlen,i,j)
            maxlen = maxlen if maxlen > j-i else j-i
        
        return maxlen
  上面用字典hash
  
  更新滑动窗口方法
  class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)==0:
            return 0
        length = 0
        hashset = set()
        templength = 0
        i=0
        for k, v in enumerate(s):
            if v not in hashset:
                hashset.add(v)
                templength += 1
            else:
                if templength > length:
                    length = templength
                while v in hashset:
                    hashset.remove(s[i])
                    templength -= 1
                    i += 1
                hashset.add(v)
                templength += 1
                
        if templength > length:
            return templength
        else:
            return length
            
