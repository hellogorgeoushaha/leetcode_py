# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head is None or head.next == None or k == 0:
            return head
        dummy = ListNode(0)
        dummy.next = head
        tail = dummy
        length = 0
        while(tail.next != None):
            tail = tail.next
            length += 1
        if k%length == 0: 
            return head
        temp = dummy
        for i in range(length-(k% length)):
            temp = temp.next
        before_head = dummy.next
        dummy.next = temp.next
        tail.next = before_head
        for i in range(length-(k% length)-1):
            print(before_head.val)
            before_head = before_head.next 
        before_head.next = None
        return dummy.next
