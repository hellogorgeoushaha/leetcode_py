class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        self.dfs(board)
        
        
    def dfs(self, board):
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    for num in '123456789':
                        board[i][j] = num
                        if self.isgood(board, i, j) and self.dfs(board):
                            return True
                        board[i][j] = '.'
                    return False
        return True
    
    
    def isgood(self, board, x, y):
        rows = [{} for i in range(9)]
        columns = [{} for i in range(9)]
        boxes = [{} for i in range(9)]
        
        for i in range(9):
            if i != x and board[i][y] == board[x][y]:
                return False
            
        for i in range(9):
            if i != y and board[x][i] == board[x][y]:
                return False
        
        m = (x//3)*3 
        n = (y//3)*3
        for i in range(3):
            for j in range(3):
                if (m + i != x or n + j != y) and board[m+i][n+j] == board[x][y]:
                    return False
                
        return True
        
#dfs for any possibility in any position board[x][y]
